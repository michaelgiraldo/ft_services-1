---
apiVersion: v1
kind: Secret
metadata:
  name: telegraf-secret
type: Opaque
stringData:
  INFLUXDB_DB: influxdb-database
  INFLUXDB_URL: http://influxdb:8086 #changed influxdb to minikube_ip
  INFLUXDB_USER: test
  INFLUXDB_USER_PASSWORD: test

---
apiVersion: v1
kind: Service
metadata:
  name: telegraf
  labels:
    app: telegraf
spec:
  ports:
    - port: 8125
      nodePort: 8125
      protocol: UDP
  selector:
    app: telegraf
  type: NodePort

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: telegraf
  name: telegraf
spec:
  selector:
    matchLabels:
      app: telegraf
  template:
    metadata:
      labels:
        app: telegraf
    spec:
      containers:
        - name: telegraf
          image: telegraf:1.10.1
          envFrom:
            - secretRef:
               name: telegraf-secret
          volumeMounts:
            - name: telegraf-config-volume
              mountPath: /etc/telegraf/telegraf.conf
              subPath: telegraf.conf
              readOnly: true
      volumes:
      - name: telegraf-config-volume
        configMap:
          name: telegraf-config

# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: telegraf-config
# data:
#   telegraf.conf: |+
#     [[outputs.influxdb]]
#       urls = ["$INFLUXDB_URL"]
#       database = "$INFLUXDB_DB"
#       username = "$INFLUXDB_USER"
#       password = "$INFLUXDB_USER_PASSWORD"

#     [[inputs.kube_inventory]]
#       ## URL for the Kubernetes API
#       url = "http://192.168.99.114"

#       ## Namespace to use. Set to "" to use all namespaces.
#       # namespace = "default"

#       ## Use bearer token for authorization. ('bearer_token' takes priority)
#       ## If both of these are empty, we'll use the default serviceaccount:
#       ## at: /run/secrets/kubernetes.io/serviceaccount/token
#       # bearer_token = "/path/to/bearer/token"
#       ## OR
#       bearer_token_string = "eyJhbGciOiJSUzI1NiIsImtpZCI6Im1aUzdDRFVxTXpJNEpQNWNuTnA5Sm9Oem56YWhfbTE0TDNzMXUxQlh1dmcifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLWpocWNkIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIzZGQ5YjgwYS0yMjhjLTRmODMtOTM1MS0xYzk1ODFjYmRjYTgiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6ZGVmYXVsdCJ9.YRtvLScNoZNUQQhaJqhO1S4_LRk5ARRrqv4hNe_-dEGcxgVpRLs8sVdsbu__56INgNOgI8n28uQfjvuwkugucAZZYBzyab9Ca0GMULOKgB9T27OAUsXopME1aX0HyneLLegAORyFiooR4fWv7KebShuh4xUxN_I3iyHFziu7bNxoeEwwmCo1gx87pRBRRRNyxdA-3CIGWOd55ozS2oak_9NTKU2G5qJiFuoZ3wEz_jfo4XgehwzXVIREyuTz7RwpHwkK2Dsjm2O2CQM5twuBfHK3FjOsx8zd6hInrhnb3P9LbftBIPs_qlMF-VL23gP8ft9iCFiMwQvfcE6EwgvyoQ"

#       ## Set response_timeout (default 5 seconds)
#       # response_timeout = "5s"

#       ## Optional Resources to exclude from gathering
#       ## Leave them with blank with try to gather everything available.
#       ## Values can be - "daemonsets", deployments", "endpoints", "ingress", "nodes",
#       ## "persistentvolumes", "persistentvolumeclaims", "pods", "services", "statefulsets"
#       # resource_exclude = [ "deployments", "nodes", "statefulsets" ]

#       ## Optional Resources to include when gathering
#       ## Overrides resource_exclude if both set.
#       # resource_include = [ "deployments", "nodes", "statefulsets" ]

#       ## Optional TLS Config
#       # tls_ca = "/path/to/cafile"
#       # tls_cert = "/path/to/certfile"
#       # tls_key = "/path/to/keyfile"
#       ## Use TLS but skip chain & host verification
#       # insecure_skip_verify = false

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-config
data:
  telegraf.conf: |+
    [[outputs.influxdb]]
      urls = ["$INFLUXDB_URL"]
      database = "$INFLUXDB_DB"
      username = "$INFLUXDB_USER"
      password = "$INFLUXDB_USER_PASSWORD"

    [[inputs.kube_inventory]]
      ## URL for the Kubernetes API
      url = "https://192.168.99.114"

      ## Namespace to use. Set to "" to use all namespaces.
      # namespace = "default"

      ## Use bearer token for authorization. ('bearer_token' takes priority)
      ## If both of these are empty, we'll use the default serviceaccount:
      ## at: /run/secrets/kubernetes.io/serviceaccount/token
      # bearer_token = "/path/to/bearer/token"
      ## OR
      bearer_token_string = "eyJhbGciOiJSUzI1NiIsImtpZCI6Im1aUzdDRFVxTXpJNEpQNWNuTnA5Sm9Oem56YWhfbTE0TDNzMXUxQlh1dmcifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLWpocWNkIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIzZGQ5YjgwYS0yMjhjLTRmODMtOTM1MS0xYzk1ODFjYmRjYTgiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6ZGVmYXVsdCJ9.YRtvLScNoZNUQQhaJqhO1S4_LRk5ARRrqv4hNe_-dEGcxgVpRLs8sVdsbu__56INgNOgI8n28uQfjvuwkugucAZZYBzyab9Ca0GMULOKgB9T27OAUsXopME1aX0HyneLLegAORyFiooR4fWv7KebShuh4xUxN_I3iyHFziu7bNxoeEwwmCo1gx87pRBRRRNyxdA-3CIGWOd55ozS2oak_9NTKU2G5qJiFuoZ3wEz_jfo4XgehwzXVIREyuTz7RwpHwkK2Dsjm2O2CQM5twuBfHK3FjOsx8zd6hInrhnb3P9LbftBIPs_qlMF-VL23gP8ft9iCFiMwQvfcE6EwgvyoQ"

      ## Set response_timeout (default 5 seconds)
      # response_timeout = "5s"

      ## Optional Resources to exclude from gathering
      ## Leave them with blank with try to gather everything available.
      ## Values can be - "daemonsets", deployments", "endpoints", "ingress", "nodes",
      ## "persistentvolumes", "persistentvolumeclaims", "pods", "services", "statefulsets"
      # resource_exclude = [ "deployments", "nodes", "statefulsets" ]

      ## Optional Resources to include when gathering
      ## Overrides resource_exclude if both set.
      # resource_include = [ "deployments", "nodes", "statefulsets" ]

      ## Optional TLS Config
      # tls_ca = "/path/to/cafile"
      # tls_cert = "/path/to/certfile"
      # tls_key = "/path/to/keyfile"
      ## Use TLS but skip chain & host verification
      insecure_skip_verify = true